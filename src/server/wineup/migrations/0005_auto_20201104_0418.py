# Generated by Django 3.1.3 on 2020-11-04 04:18

from django.db import migrations
from django.db.utils import IntegrityError
from django.db import transaction
import pandas as pd


def import_parsed_data(apps, schema_editor):
    parsed_review = pd.read_csv("../../data/interim/review-git.csv")
    User = apps.get_model("wineup", "User")
    user_id_db_user_id = {}
    for user_id in parsed_review["user_id"].unique():
        user = User()
        user.save()
        user_id_db_user_id[user_id] = user.pk

    Wine = apps.get_model("wineup", "Wine")
    wine_id_db_wine_id = {}
    for wine_id in parsed_review["wine_id"].unique():
        # print()
        # print(len(parsed_review[parsed_review["wine_id"] == wine_id]["other_wine_names"]))
        # print(parsed_review[parsed_review["wine_id"] == wine_id]["other_wine_names"])
        # print(parsed_review[parsed_review["wine_id"] == wine_id]["other_wine_names"].iloc[0])
        wine = Wine(
            all_names=parsed_review[parsed_review["wine_id"] == wine_id][
                "other_wine_names"
            ].iloc[0]
        )
        wine.save()
        wine_id_db_wine_id[wine_id] = wine.pk

    Review = apps.get_model("wineup", "Review")
    for _, row in parsed_review.iterrows():
        user = User.objects.get(pk=user_id_db_user_id[row["user_id"]])
        wine = Wine.objects.get(pk=wine_id_db_wine_id[row["wine_id"]])
        review = Review(
            rating=row["rating"], variants=row["variants"], user=user, wine=wine
        )
        try:
            with transaction.atomic():
                review.save()
        except IntegrityError:
            pass


class Migration(migrations.Migration):
    dependencies = [
        ("wineup", "0004_auto_20201104_0305"),
    ]

    operations = [migrations.RunPython(import_parsed_data)]
